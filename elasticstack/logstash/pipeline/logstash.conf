input {
  file {
    path => "/usr/share/logstash/data_import/catalina.out"
    start_position => "beginning"
  }
}

filter {
  if [message] =~ "(?i)\bhibernate\b: ?select ?.*" {
    drop { }
  }
  grok {
    # standard log message
    # example: 2019-07-22 14:45:55.668 [http-nio-8080-exec-65] WARN  .EhcacheAccessStrategyFactoryImpl:40 - HHH020007: read-only cache configured for mutable entity [org.nrmp.athena.domain.Tenant] ||||||||||
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[.*\] %{LOGLEVEL:loglevel} %{DATA:class}" }
      add_field => { "subType" => "standard" }
  }
  if "_grokparsefailure" not in [tags] {
    # 
    # Action definitions:
    # List of regex checks that set the action type of an event
    # Add else ifs with the regex needed like in the couple examples and the action name you want
    #
    if [message] =~ "Refreshing SOAP Properties\." {
      mutate {
        # defines the regex for refreshing SOAP properties
        add_field => { "action" => "refreshSoap" }
      }
    } else if [message] =~ "Fetching job aides for the current user" {
      mutate {
        # defines the regex for fetching job aides
        add_field => { "action" => "fetchJobAides" }
      }
    }
  }
  if "_grokparsefailure" in [tags] {
    grok {
      # at, Caused by, or ... ## common frames omitted
      # ex: Caused by: java.net.SocketTimeoutException: connect timed out
      # ex: at java.net.PlainSocketImpl.socketConnect(Native Method)
      # ex: ... 98 common frames omitted
      patterns_dir => ["./patterns"]
      match => { "message" => "%{STACK_TRACE_MESSAGE:logMessage}" }
      remove_tag => ["_grokparsefailure"]
      add_field => { "subType" => "stackTrace" }
    }
  }
  ruby {
    init => "
    require 'securerandom'
    @@uuid = SecureRandom.uuid
    @@seq = 0
    "
    code => "
    puts event.get('loglevel')
    if event.get('loglevel') == 'ERROR'
      @@uuid = SecureRandom.uuid  
      @@seq = 0    
      event.set('exceptionSequence', @@seq)
      event.set('exceptionCorrelation', @@uuid)
      @@seq = @@seq + 1
    elsif event.get('subType') == 'stackTrace'
      event.set('exceptionCorrelation', @@uuid)
      event.set('exceptionSequence', @@seq)
      @@seq = @@seq + 1
    end
    "
  }   
  if "_grokparsefailure" in [tags] {
    grok {
      match => { "message" => "%{GREEDYDATA:logMessage}" }
      remove_tag => ["_grokparsefailure"]
      add_field => { "subType" => "catchall" }
    }
  }
}

output {
  elasticsearch {
    hosts => "elasticsearch:9200"
  }
}

